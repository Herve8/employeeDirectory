{"ast":null,"code":"var _jsxFileName = \"/Users/herve/Desktop/employee-directory/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport EmployeeTable from './components/EmployeeTable';\nimport API from './utils/Api';\nimport EmployeeContext from './utils/EmployeeContext';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //* State\n  const [employeeState, setEmployeeState] = useState({\n    employees: [],\n    filteredEmployees: []\n  });\n  const [sortState, setSortState] = useState(true);\n  const [searchState, setSearchState] = useState(''); // On page load, make the API call and save results to state\n\n  useEffect(() => {\n    API.getEmployees().then(({\n      data: {\n        results\n      }\n    }) => {\n      setEmployeeState({\n        employees: results,\n        filteredEmployees: results\n      });\n    });\n  }, []); // Whenever searchState (representing the input in the search bar) changes, filter the employee list\n\n  useEffect(() => {\n    setEmployeeState({ ...employeeState,\n      filteredEmployees: employeeState.employees.filter(employee => {\n        return (// allow users to search for first/last name or phone\n          employee.Employeename.first.toLowerCase().indexOf(searchState) !== -1 || employee.name.last.toLowerCase().indexOf(searchState) !== -1 || employee.phone.indexOf(searchState) !== -1\n        );\n      })\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchState]); // Sort by either name column\n\n  const sortName = column => {\n    const updateSort = sortState ? employeeState.filteredEmployees.sort((a, b) => a.name[column].localeCompare(b.name[column])) : employeeState.filteredEmployees.sort((a, b) => b.name[column].localeCompare(a.name[column]));\n    setEmployeeState({ ...employeeState,\n      filteredEmployees: updateSort\n    });\n    setSortState(!sortState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(EmployeeContext.Provider, {\n    value: {\n      employeeState,\n      sortName,\n      setSearchState\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"jumbotron\",\n      children: /*#__PURE__*/_jsxDEV(EmployeeTable, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gYOrV/pbZixaayB9kMQd64hmJMk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/herve/Desktop/employee-directory/src/App.js"],"names":["React","useEffect","useState","Header","Footer","EmployeeTable","API","EmployeeContext","Jumbotron","App","employeeState","setEmployeeState","employees","filteredEmployees","sortState","setSortState","searchState","setSearchState","getEmployees","then","data","results","filter","employee","Employeename","first","toLowerCase","indexOf","name","last","phone","sortName","column","updateSort","sort","a","b","localeCompare"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport EmployeeTable from './components/EmployeeTable';\nimport API from './utils/Api';\nimport EmployeeContext from './utils/EmployeeContext';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nimport './App.css';\n\nfunction App() {\n  //* State\n  const [employeeState, setEmployeeState] = useState({\n    employees: [],\n    filteredEmployees: []\n  });\n  const [sortState, setSortState] = useState(true);\n  const [searchState, setSearchState] = useState('');\n\n  // On page load, make the API call and save results to state\n  useEffect(() => {\n    API.getEmployees().then(({ data: { results } }) => {\n      setEmployeeState({\n        employees: results,\n        filteredEmployees: results\n      });\n    });\n  }, []);\n\n  // Whenever searchState (representing the input in the search bar) changes, filter the employee list\n  useEffect(() => {\n    setEmployeeState({\n      ...employeeState,\n      filteredEmployees: employeeState.employees.filter(employee => {\n        return (\n          // allow users to search for first/last name or phone\n          employee.Employeename.first.toLowerCase().indexOf(searchState) !== -1 ||\n          employee.name.last.toLowerCase().indexOf(searchState) !== -1 ||\n          employee.phone.indexOf(searchState) !== -1\n        );\n      })\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchState]);\n\n  // Sort by either name column\n  const sortName = column => {\n    const updateSort = sortState\n      ? employeeState.filteredEmployees.sort((a, b) =>\n          a.name[column].localeCompare(b.name[column])\n        )\n      : employeeState.filteredEmployees.sort((a, b) =>\n          b.name[column].localeCompare(a.name[column])\n        );\n    setEmployeeState({\n      ...employeeState,\n      filteredEmployees: updateSort\n    });\n    setSortState(!sortState);\n  };\n\n  return (\n    <EmployeeContext.Provider\n      value={{ employeeState, sortName, setSearchState }}\n    >\n      <Header />\n        <Jumbotron fluid className='jumbotron'>\n          <EmployeeTable />\n        </Jumbotron>\n\n      <Footer />\n    </EmployeeContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}